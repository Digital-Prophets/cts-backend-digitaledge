// <auto-generated />
using System;
using DigitalEdge.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DigitalEdge.Repository.Migrations
{
    [DbContext(typeof(DigitalEdgeContext))]
    partial class DigitalEdgeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DigitalEdge.Repository.Appointment", b =>
                {
                    b.Property<long>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AppointmentStatus")
                        .HasColumnType("int");

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdited")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DaysLate")
                        .HasColumnType("int");

                    b.Property<long>("EditedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("FacilityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("InteractionDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ServiceTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("AppointmentId");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.HasIndex("FacilityId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("DigitalEdge.Repository.BulkMessages", b =>
                {
                    b.Property<long>("BulkMessagesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdited")
                        .HasColumnType("datetime2");

                    b.Property<long>("EditedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("FacilityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ServicePointId")
                        .HasColumnType("bigint");

                    b.HasKey("BulkMessagesId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("ServicePointId");

                    b.ToTable("BulkMessages");
                });

            modelBuilder.Entity("DigitalEdge.Repository.Client", b =>
                {
                    b.Property<long>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AccessToPhone")
                        .HasColumnType("bit");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("AlternativePhoneNumber1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArtNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientPhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientRelationship")
                        .HasColumnType("int");

                    b.Property<long>("ClientStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClientTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<long>("EditBy")
                        .HasColumnType("bigint");

                    b.Property<string>("EnrolledByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnrolledByPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EnrollmentType")
                        .HasColumnType("int");

                    b.Property<long>("FacilityId")
                        .HasColumnType("bigint");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("GeneralComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HamornizedMobilePhone")
                        .HasColumnType("int");

                    b.Property<int>("HarmonizedPhysicalAddress")
                        .HasColumnType("int");

                    b.Property<long?>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("PhoneVerifiedByAnalyst")
                        .HasColumnType("bit");

                    b.Property<bool>("PhoneVerifiedByFacilityStaff")
                        .HasColumnType("bit");

                    b.Property<string>("Zone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ServicePointId")
                        .HasColumnType("bigint");

                    b.Property<long>("SexId")
                        .HasColumnType("bigint");

                    b.Property<long>("StatusCommentId")
                        .HasColumnType("bigint");

                    b.HasKey("ClientId");

                    b.HasIndex("ClientStatusId");

                    b.HasIndex("ClientTypeId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ServicePointId");

                    b.HasIndex("SexId");

                    b.HasIndex("StatusCommentId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("DigitalEdge.Repository.ClientIdentity", b =>
                {
                    b.Property<long>("IdentityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdited")
                        .HasColumnType("datetime2");

                    b.Property<long>("EditedBy")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("FingerPrintImage")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("IdentityId");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientIdentitys");
                });

            modelBuilder.Entity("DigitalEdge.Repository.District", b =>
                {
                    b.Property<long>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdited")
                        .HasColumnType("datetime2");

                    b.Property<string>("DistrictName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("EditedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("ProvinceId")
                        .HasColumnType("bigint");

                    b.HasKey("DistrictId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("DigitalEdge.Repository.Enitity.ClientStatus", b =>
                {
                    b.Property<long>("ClientStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientStatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientStatusId");

                    b.ToTable("ClientStatuses");
                });

            modelBuilder.Entity("DigitalEdge.Repository.Enitity.ClientType", b =>
                {
                    b.Property<long>("ClientTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientTypeId");

                    b.ToTable("ClientTypes");
                });

            modelBuilder.Entity("DigitalEdge.Repository.Enitity.FacilityType", b =>
                {
                    b.Property<long>("FacilityTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FacilityTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FacilityTypeId");

                    b.ToTable("FacilityTypes");
                });

            modelBuilder.Entity("DigitalEdge.Repository.Enitity.Language", b =>
                {
                    b.Property<long>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LanguageName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LanguageId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("DigitalEdge.Repository.Enitity.Sex", b =>
                {
                    b.Property<long>("SexId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SexName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SexId");

                    b.ToTable("Sexes");
                });

            modelBuilder.Entity("DigitalEdge.Repository.Enitity.StatusComments", b =>
                {
                    b.Property<long>("StatusCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ClientStatusId")
                        .HasColumnType("bigint");

                    b.Property<string>("StatusCommentName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusCommentId");

                    b.HasIndex("ClientStatusId");

                    b.ToTable("StatusComments");
                });

            modelBuilder.Entity("DigitalEdge.Repository.Enitity.ViralLoad", b =>
                {
                    b.Property<long>("ViralLoadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<int>("CurrentViralLoadCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("InitialViralLoadCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("NextVLDueDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ViralLoadId");

                    b.HasIndex("ClientId");

                    b.ToTable("ViralLoadResults");
                });

            modelBuilder.Entity("DigitalEdge.Repository.Facility", b =>
                {
                    b.Property<long>("FacilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdited")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<long>("EditedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("FacilityContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacilityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FacilityTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.HasKey("FacilityId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("FacilityTypeId");

                    b.ToTable("Facilities");
                });

            modelBuilder.Entity("DigitalEdge.Repository.MessageTemplate", b =>
                {
                    b.Property<long>("MessageTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdited")
                        .HasColumnType("datetime2");

                    b.Property<long>("EditedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<bool>("Timed")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MessageTemplateId");

                    b.ToTable("MessageTemplates");
                });

            modelBuilder.Entity("DigitalEdge.Repository.Messages", b =>
                {
                    b.Property<long>("MessagesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<string>("ClientNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdited")
                        .HasColumnType("datetime2");

                    b.Property<long>("EditedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("FacilityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ServicePointId")
                        .HasColumnType("bigint");

                    b.HasKey("MessagesId");

                    b.HasIndex("ClientId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("ServicePointId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DigitalEdge.Repository.Province", b =>
                {
                    b.Property<long>("ProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdited")
                        .HasColumnType("datetime2");

                    b.Property<long>("EditedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("ProvinceName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProvinceId");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("DigitalEdge.Repository.ServicePoint", b =>
                {
                    b.Property<long>("ServicePointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdited")
                        .HasColumnType("datetime2");

                    b.Property<long>("EditedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("FacilityId")
                        .HasColumnType("bigint");

                    b.Property<string>("ServicePointName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServicePointId");

                    b.HasIndex("FacilityId");

                    b.ToTable("ServicePoints");
                });

            modelBuilder.Entity("DigitalEdge.Repository.UserFacility", b =>
                {
                    b.Property<long?>("UserFacilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("FacilityId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("ServicePointId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("UserFacilityId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("ServicePointId");

                    b.HasIndex("UserId");

                    b.ToTable("Userfacility");
                });

            modelBuilder.Entity("DigitalEdge.Repository.UserRoles", b =>
                {
                    b.Property<long>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("DigitalEdge.Repository.Users", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuperAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DigitalEdge.Repository.Visit", b =>
                {
                    b.Property<long>("VisitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdviseNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Age")
                        .HasColumnType("bigint");

                    b.Property<long?>("AppointmentId")
                        .HasColumnType("bigint");

                    b.Property<long>("AppointmentStatus")
                        .HasColumnType("bigint");

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<string>("ClientPhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClinicRemarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdited")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("EditedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("FacilityId")
                        .HasColumnType("bigint");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NextAppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PriorAppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReasonOfVisit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondDiagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ServicePointId")
                        .HasColumnType("bigint");

                    b.Property<long>("ServiceTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ServiceTypesServiceTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Therapy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThirdDiagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VisitType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitId");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.HasIndex("FacilityId");

                    b.HasIndex("ServicePointId");

                    b.HasIndex("ServiceTypesServiceTypeId");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("DigitalEdge.Repository.VisitServices", b =>
                {
                    b.Property<long>("ServiceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ServiceTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceTypeId");

                    b.ToTable("ServiceTypes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DigitalEdge.Repository.Appointment", b =>
                {
                    b.HasOne("DigitalEdge.Repository.Client", "ClientModel")
                        .WithOne("ClientAppointments")
                        .HasForeignKey("DigitalEdge.Repository.Appointment", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigitalEdge.Repository.Facility", "FacilityModel")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigitalEdge.Repository.VisitServices", "ServiceTypeModel")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DigitalEdge.Repository.BulkMessages", b =>
                {
                    b.HasOne("DigitalEdge.Repository.Facility", "facility")
                        .WithMany()
                        .HasForeignKey("FacilityId");

                    b.HasOne("DigitalEdge.Repository.ServicePoint", "ServicePoints")
                        .WithMany()
                        .HasForeignKey("ServicePointId");
                });

            modelBuilder.Entity("DigitalEdge.Repository.Client", b =>
                {
                    b.HasOne("DigitalEdge.Repository.Enitity.ClientStatus", "ClientStatuses")
                        .WithMany()
                        .HasForeignKey("ClientStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigitalEdge.Repository.Enitity.ClientType", "ClientTypes")
                        .WithMany()
                        .HasForeignKey("ClientTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigitalEdge.Repository.Facility", "Facilities")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigitalEdge.Repository.Enitity.Language", "Languages")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("DigitalEdge.Repository.ServicePoint", "ServicePoints")
                        .WithMany()
                        .HasForeignKey("ServicePointId");

                    b.HasOne("DigitalEdge.Repository.Enitity.Sex", "Sex")
                        .WithMany()
                        .HasForeignKey("SexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigitalEdge.Repository.Enitity.StatusComments", "StatusComments")
                        .WithMany()
                        .HasForeignKey("StatusCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DigitalEdge.Repository.ClientIdentity", b =>
                {
                    b.HasOne("DigitalEdge.Repository.Client", "Clients")
                        .WithMany()
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("DigitalEdge.Repository.District", b =>
                {
                    b.HasOne("DigitalEdge.Repository.Province", "Provinces")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DigitalEdge.Repository.Enitity.StatusComments", b =>
                {
                    b.HasOne("DigitalEdge.Repository.Enitity.ClientStatus", "ClientStatuses")
                        .WithMany()
                        .HasForeignKey("ClientStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DigitalEdge.Repository.Enitity.ViralLoad", b =>
                {
                    b.HasOne("DigitalEdge.Repository.Client", "Clients")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DigitalEdge.Repository.Facility", b =>
                {
                    b.HasOne("DigitalEdge.Repository.District", "Districts")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("DigitalEdge.Repository.Enitity.FacilityType", "FacilityTypeModel")
                        .WithMany()
                        .HasForeignKey("FacilityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DigitalEdge.Repository.Messages", b =>
                {
                    b.HasOne("DigitalEdge.Repository.Client", "Clients")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigitalEdge.Repository.Facility", "facility")
                        .WithMany()
                        .HasForeignKey("FacilityId");

                    b.HasOne("DigitalEdge.Repository.ServicePoint", "ServicePoints")
                        .WithMany()
                        .HasForeignKey("ServicePointId");
                });

            modelBuilder.Entity("DigitalEdge.Repository.ServicePoint", b =>
                {
                    b.HasOne("DigitalEdge.Repository.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId");
                });

            modelBuilder.Entity("DigitalEdge.Repository.UserFacility", b =>
                {
                    b.HasOne("DigitalEdge.Repository.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId");

                    b.HasOne("DigitalEdge.Repository.ServicePoint", "ServicePoints")
                        .WithMany()
                        .HasForeignKey("ServicePointId");

                    b.HasOne("DigitalEdge.Repository.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DigitalEdge.Repository.Users", b =>
                {
                    b.HasOne("DigitalEdge.Repository.UserRoles", "UserRoles")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DigitalEdge.Repository.Visit", b =>
                {
                    b.HasOne("DigitalEdge.Repository.Appointment", "Appointments")
                        .WithMany()
                        .HasForeignKey("AppointmentId");

                    b.HasOne("DigitalEdge.Repository.Client", "Clients")
                        .WithOne("ClientVisits")
                        .HasForeignKey("DigitalEdge.Repository.Visit", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigitalEdge.Repository.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigitalEdge.Repository.ServicePoint", "ServicePoints")
                        .WithMany()
                        .HasForeignKey("ServicePointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigitalEdge.Repository.VisitServices", "ServiceTypes")
                        .WithMany()
                        .HasForeignKey("ServiceTypesServiceTypeId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
